name: ci-release-production

on:
  pull_request:
    branches:
    - main
    - 'release/**'

  push:
    branches:
    - main    
    - 'release/**'

jobs: 

  build-to-release:
    name: Build Python üêç
    
    environment:
      name: release
      url: 'https://rancher-finance-stage.99app.com/'
      
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2

      # Set-up python
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: ~/.cache/pypoetry

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        if: "!contains(github.event.head_commit.message, '/nocache')"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache
            ~/.local
            .venv    
          #key: poetry      
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
              ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
              ${{ runner.os }}-

    
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        #if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          poetry install 
      #poetry export -f requirements.txt --output requirements.txt --without-hashes
      #if [ ! -f requirements.txt ]; then poetry export -f requirements.txt --output requirements.txt --without-hashes; fi  
      #pip install pytest-cov

      #----------------------------------------------
      # Run Linting
      #----------------------------------------------
      - name: Run pre-commit hooks (Linting)
        if: github.event_name == 'push'
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install -f --install-hooks
          pre-commit run --all-files


      #----------------------------------------------
      # Export requirements from poetry
      #----------------------------------------------
      - name: Export requirements from poetry
        #if: github.event_name == 'pull_request'
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
      

      #----------------------------------------------
      #Run coverage tests
      #----------------------------------------------
      - name: Coverage | test pytester-cov
        id: pytester-cov
        uses: alexanderdamiani/pytester-cov@v1.2.3
        env:
          PYTEST_ADDOPTS: -v -x --cov=simplecalc --cov-config=setup.cfg --cov-report=term
        with:
          pytest-root-dir: '.'
          cov-omit-list: 'doc/*, simplecalc/tests/*'
          cov-threshold-single: ${{ secrets.COVERAGE_SINGLE }} 
          cov-threshold-total: ${{ secrets.COVERAGE_TOTAL }}

      #----------------------------------------------
      #Coverage | Check single file
      #----------------------------------------------
      - name: Coverage | single fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
        run: |
          echo "[Coverage] | single fail | ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
          exit 1

      #----------------------------------------------
      #Coverage | Check total file
      #----------------------------------------------
      - name: Coverage | total fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
        run: |
          echo "[Coverage] | total fail | ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
          exit 1

      #----------------------------------------------
      #Coverage | commit table generated
      #----------------------------------------------
      - name: Commit pytest coverage table
        uses: peter-evans/commit-comment@v1
        with:
          body: ${{ steps.pytester-cov.outputs.output-table }}

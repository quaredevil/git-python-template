name: ci-develop

on:
  push:
    branches:
    - 'develop'

env:
  python-version: 3.8

jobs: 

  build-to-develop:
    name: Build Python 🐍
    
    environment:
      name: development
    
    #runs-on: ubuntu-latest
    runs-on: 99-staging-runners

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: 💾 Repository | Check out
        uses: actions/checkout@v2

      # Set-up python
      - name: ⚙️ Build  | Set up Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: ⚙️ Build  | Load cached venv
        id: cached-poetry-dependencies
        if: "!contains(github.event.head_commit.message, '/nocache')"
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.cache
            ~/.local   
          #key: poetry      
          key: ${{ runner.os }}-build-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
              ${{ runner.os }}-build-${{ steps.setup-python.outputs.python-version }}-
              ${{ runner.os }}-build-
 

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: ⚙️ Build  | Install Poetry
        #if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          #virtualenvs-path: ~/.cache/pypoetry


      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: ⚙️ Build  | Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          poetry install 

      
      #----------------------------------------------
      # Run Linting
      #----------------------------------------------
      - name: 🔧 Linting | Run pre-commit hooks
        if: github.event_name == 'push'
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install -f --install-hooks
          pre-commit run --all-files


      #----------------------------------------------
      # Export requirements from poetry
      #----------------------------------------------
      - name: ⚙️ Build  | Export requirements from poetry
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
      
      - name: ⚙️ Build  | Export requirements from pip
        if: steps.cached-poetry-dependencies.outputs.cache-hit = 'true'
        run: |
          python -m pip freeze > requirements.txt

 
      #----------------------------------------------
      # Artifact | Upload requirements.txt
      #----------------------------------------------
      - name: 📄 Artifact | Tar files
        run: tar -czvf requirements.tar.gz requirements.txt

      - name: 📄 Artifact | Upload requirements
        uses: actions/upload-artifact@v2
        with:
          name: requirements.tar.gz
          path: requirements.tar.gz
          
          
  coverage:
    name: Coverage 🔍
    
    needs: build-to-develop

    environment:
      name: development
    
    #runs-on: ubuntu-latest
    runs-on: 99-staging-runners

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: 💾 Repository | Check out
        uses: actions/checkout@v2

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: ⚙️ Build  | Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.cache
            ~/.local     
          #key: poetry      
          key: ${{ runner.os }}-build-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
              ${{ runner.os }}-build-${{ steps.setup-python.outputs.python-version }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-

      #----------------------------------------------
      # Artifact | Download requirements.txt
      #----------------------------------------------
      - name: 📄 Artifact | Download requirements
        uses: actions/download-artifact@v2
        with:
          name: requirements.tar.gz
          path: .


      - name: 📄 Artifact | Extract tar files
        run: tar -xvf requirements.tar.gz


      - name: 📄 Artifact | Delete requirements
        uses: geekyeggo/delete-artifact@v1
        with:
          name: requirements.tar.gz
          failOnError: false

      #----------------------------------------------
      #Run coverage tests
      #----------------------------------------------
      - name: 🔍 Coverage | test pytester-cov
        id: pytester-cov
        uses: alexanderdamiani/pytester-cov@v1.2.3
        env:
          PYTEST_ADDOPTS: -v -x --cov=simplecalc --cov-config=setup.cfg --cov-report=term
        with:
          pytest-root-dir: '.'
          cov-omit-list: '.venv/*, doc/*, simplecalc/tests/*'
          #cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
          #cov-threshold-total: ${{ env.COVERAGE_TOTAL }}
          cov-threshold-single: ${{ secrets.COVERAGE_SINGLE }} 
          cov-threshold-total: ${{ secrets.COVERAGE_TOTAL }}

      - name: 🔍 Coverage | Read pytester output
        run: echo $FOR_ECHO
        env:
          FOR_ECHO: ${{ steps.pytester-cov.outputs.output-table }}
        
      #----------------------------------------------
      #Coverage | Check single file
      #----------------------------------------------
      - name: 🔍 Coverage | single fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
        run: |
          echo "[Coverage] | single fail | ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
          exit 1

      #----------------------------------------------
      #Coverage | Check total file
      #----------------------------------------------
      - name: 🔍 Coverage | total fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
        run: |
          echo "[Coverage] | total fail | ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
          exit 1

      #----------------------------------------------
      #Coverage | commit table generated
      #----------------------------------------------
      - name: 🔍 Coverage | Commit pytest coverage table
        uses: peter-evans/commit-comment@v1
        with:
          body: ${{ steps.pytester-cov.outputs.output-table }}


  build-container-to-develop:
    name: Build Container 🐳
    
    needs: coverage

    environment:
      name: development
      url: 'https://rancher-finance-stage.99app.com/'

    #runs-on: ubuntu-latest
    runs-on: 99-staging-runners

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: 💾 Repository | Check out
        uses: actions/checkout@v2

      #----------------------------------------------
      # Prepare 
      #----------------------------------------------
      - name: ℹ️  Prepare | Version
        id: prepare
        run: |
          echo "GITHUB_REF: $GITHUB_REF"

          DOCKER_IMAGE=${{ secrets.DOCKERHUB_IMAGE }}
          TAGS="${DOCKER_IMAGE}:dev,${DOCKER_IMAGE}:${{ github.sha }}"

          echo ::set-output name=tags::${TAGS}
          echo "Tags: $TAGS"
          
      #----------------------------------------------
      #This is the a separate action that sets up buildx runner
      #----------------------------------------------
      - name: 🐳 Container | Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: 🐳 Container | Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders
 
      #----------------------------------------------
      #       load cached if cache exists
      #----------------------------------------------
      - name: ⚡️ Cache | Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #----------------------------------------------
      #Log in to Docker Hub
      #----------------------------------------------
      - name: 🐳 Container | Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      

      #----------------------------------------------
      #Build and push
      #----------------------------------------------
      - name: 🐳 Container | Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prepare.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          #cache-from: type=registry,ref=${{ secrets.DOCKERHUB_IMAGE }}:buildcache
          #cache-to: type=registry,ref=${{ secrets.DOCKERHUB_IMAGE }}:buildcache,mode=max
          #cache-from: type=gha
          #cache-to: type=gha,mode=max
          
      
      #----------------------------------------------
      #Clear old cache
      #----------------------------------------------
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🐳 Container | Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  deployment-manifests:
    name: Deployment manifests ☸️
    
    needs: build-container-to-develop

    environment:
      name: development
      url: 'https://rancher-finance-stage.99app.com/'

    #runs-on: ubuntu-latest
    runs-on: 99-staging-runners

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: 💾 Repository | Check out
        uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      
      #----------------------------------------------
      # Kustomize Build
      #----------------------------------------------
      - name: ☸️ K8S | Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: ${{ secrets.KUSTOMIZE_VERSION }}

      #----------------------------------------------
      # Kustomize Build
      #----------------------------------------------
      - name: ☸️ K8S | Update manifests (kustomize)
        env:
          DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}

        run: |
          cd .k8s/overlays/development
          kustomize edit set image container-to-change-cd=$DOCKERHUB_IMAGE:${{ github.sha }}
          cat kustomization.yaml


      #----------------------------------------------
      # Commit code 
      #----------------------------------------------
      - name: 💾 Repository | Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "🤖 change image tag (manifests k8s)"
      

      #----------------------------------------------
      # Push code 
      #----------------------------------------------
      - name: 💾 Repository | Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      

  

name: ci-develop

on:
  pull_request:
    branches:
    - develop

  push:
    branches:
    - develop

jobs: 

  environment:
    name: check if TEST_URL is set in github secrets
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    
    outputs:
      is_TEST_URL_set: ${{ steps.checksecret_job.outputs.is_TEST_URL_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checksecret_job
        env:
            TEST_URL: ${{ secrets.TEST_URL }}
        run: |
            echo "is_TEST_URL_set: ${{ env.TEST_URL != '' }}"
            echo "::set-output name=is_TEST_URL_set::${{ env.TEST_URL != '' }}"


  build-dev:
    
    name: Build Python 🐍
    
    environment:
      name: development
      url: 'https://rancher-finance-stage.99app.com/'
      TEST2_URL: ${{ needs.checksecret.outputs.is_TEST_URL_set }}
    
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      


      - name: Check Environments
        run: |
          echo TEST_URL=${{ secrets.TEST_URL }}


      # Set-up python
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: ~/.cache/pypoetry

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        if: "!contains(github.event.head_commit.message, '/nocache')"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache
            ~/.local
            .venv    
          #key: poetry      
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
              ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
              ${{ runner.os }}-

    
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          poetry install        


      #----------------------------------------------
      # Run Linting
      #----------------------------------------------
      - name: Run pre-commit hooks (Linting)
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install -f --install-hooks
          pre-commit run --all-files

      #----------------------------------------------
      # Run python tests with coverage
      #----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run pytest --cache-clear --cov=simplecalc > pytest-coverage.txt


      #----------------------------------------------
      #Run coverage tests
      #----------------------------------------------
      - name: pytest-coverage-commentator
        uses: coroo/pytest-coverage-commentator@v1.0.2
        with:
          pytest-coverage: pytest-coverage.txt  

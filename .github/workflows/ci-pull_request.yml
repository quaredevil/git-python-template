name: continuous-integration-pull-request

on:
  pull_request:
    branches:
    - main
    - release

jobs:

  build_pull:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2

      # Set-up python
      - name: Set up Python 3.x
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          virtualenvs-path: ~/.cache/pypoetry

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache
            ~/.local
            .venv    
          #key: poetry      
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
              ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
              ${{ runner.os }}-

    
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          poetry install          
        #  pip install pre-commit


      #----------------------------------------------
      # Run python tests with coverage
      #----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run pytest --cache-clear --cov=simplecalc > pytest-coverage.txt

      #----------------------------------------------
      #Run coverage tests
      #----------------------------------------------
      - name: pytest-coverage-commentator
        uses: coroo/pytest-coverage-commentator@v1.0.2
        with:
          pytest-coverage: pytest-coverage.txt  